<?xml version="1.0" encoding="utf-8" ?>

<chapter id="incomplete-and-skipped-tests">
  <title>Testes Incompletos e Pulados</title>

  <section id="incomplete-and-skipped-tests.incomplete-tests">
    <title>Testes Incompletos</title>

    <para>
      Quando você está trabalhando em uma nova classe de casos de teste, você pode
      querer iniciar pela escrita de um metodo vazio como : <programlisting>public function testSomething()
{
}</programlisting>  para pular passagens deste teste que você terá que escrever. O 
      problema é que métodos vazios de testes é que eles são interpretados como 
      executado com sucesso pelo PHPUnit. Esta interpretação errada leva para resultados
      de teste inúteis -- você não pode ver se um teste é, na verdade, sucesso ou não implementados.
      Ao chamar o método  <literal>$this->fail()</literal> em um teste não implementado 
      não irá ajudar muito, desde que o teste seja interpretado como uma falha. Esta seria
      tão errada quanto interpretar um teste não implementado como executado com sucesso.
   </para>

    <para>
      <indexterm><primary>Testes Incompletos</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTest</primary></indexterm>
      <indexterm><primary>PHPUnit_Framework_IncompleteTestError</primary></indexterm>

      Se nós pensarmos num teste com sucesso como uma lus verde e um teste com falha
      como um sinal vermelho, nós precisamos uma luz amarela adicional para marcar um 
      teste como imcompleto ou não implementado. A classe <literal>PHPUnit_Framework_IncompleteTest</literal> 
      serve para marcar uma excessão que é levantada por um método de teste como o 
      resultado de um teste incompleto ou atualmente não implementado. A classe
      <literal>PHPUnit_Framework_IncompleteTestError</literal> é a implementação
      padrão desta interface.
    </para>

    <para>
      O arquivo <xref linkend="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php" />
      mostra uma classe de caso de teste , <literal>SampleTest</literal>, que contém
      um método de teste, <literal>testSomething()</literal>. Convém chamar o método
      <literal>markTestIncomplete()</literal>  (que automaticamente
      gera uma excessão do tipo <literal>PHPUnit_Framework_IncompleteTestError</literal>)
      no método de teste, para marcamos o teste como incompleto.
    </para>

    <example id="incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php">
      <title>Marcando um teste como incompleto</title>
      <programlisting><![CDATA[<?php
class SampleTest extends PHPUnit_Framework_TestCase
{
    public function testSomething()
    {
        // Optional: Test anything here, if you want.
        $this->assertTrue(TRUE, 'Este realmente funciona.');

        // Stop here and mark this test as incomplete.
        $this->markTestIncomplete(
          'Este teste ainda não foi implementado.'
        );
    }
}
?>]]></programlisting>
    </example>

    <para>
      Um teste incompleto é denotado pela letra <literal>I</literal> 
      na saída do PHPUnit na linha de comando do teste, como mostra o 
      exemplo a seguir:
    </para>

    <screen><userinput>phpunit --verbose SampleTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

I

Time: 0 seconds, Memory: 3.75Mb

There was 1 incomplete test:

1) SampleTest::testSomething
This test has not been implemented yet.

/home/sb/SampleTest.php:12
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 1, Incomplete: 1.</screen>

    <para>
      A sessão <xref linkend="incomplete-and-skipped-tests.incomplete-tests.tables.api" />
      mostra a API que marca testes como imcompleto.
    </para>

    <table id="incomplete-and-skipped-tests.incomplete-tests.tables.api">
      <title>API para Testes Incompletos</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Método</entry>
            <entry>Significado</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestIncomplete()</literal></entry>
            <entry>Marca o teste atual como Incompleto.</entry>
          </row>
          <row>
            <entry><literal>void markTestIncomplete(string $message)</literal></entry>
            <entry>Marca o teste atual como incompleto usando a variável <literal>$message</literal>
                   como uma mensagem explicativa.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="incomplete-and-skipped-tests.skipping-tests">
    <title>Pulando Testes</title>

    <para>
      Nem todos os testes podem ser rodados em todos os ambientes, Considere,
      por exemplo, uma camada de abstração do banco de dados que possui 
      alguns drivers para suportar diferentes SGDBs. Os testes para o driver do
      MySQL pode, é claro, rodar apenas se o MySQL estiver disponível.
    </para>

    <para>
      O Exemplo <xref linkend="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php" />
      mostra uma classe de caso de teste, <literal>DatabaseTest</literal>, que contém um método de teste
      , <literal>testConnection()</literal>. Na classe de teste, o método <literal>setUp()</literal> 
      checa se a extensão MySQLi está disponível e usa o método <literal>markTestSkipped()</literal>
      para pular o teste se a extensão não estiver disponível.
    </para>

    <example id="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php">
      <title>Pulando um teste</title>
      <programlisting><![CDATA[<?php
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    protected function setUp()
    {
        if (!extension_loaded('mysqli')) {
            $this->markTestSkipped(
              'A extensão MySQLi não está disponível.'
            );
        }
    }

    public function testConnection()
    {
        // ...
    }
}
?>]]></programlisting>
    </example>

    <para>
      Um teste que foi ignorado é marcado pela letra <literal>S</literal> na saída
      do comando do PHPUnit, como mostrado no exemplo a seguir:
    </para>

    <screen><userinput>phpunit --verbose DatabaseTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

S

Time: 0 seconds, Memory: 3.75Mb

There was 1 skipped test:

1) DatabaseTest::testConnection
A extensão do Mysql não está disponível.

/home/sb/DatabaseTest.php:9
OK, but incomplete or skipped tests!
Tests: 1, Assertions: 0, Skipped: 1.</screen>

    <para>
      A sessão <xref linkend="incomplete-and-skipped-tests.skipped-tests.tables.api" />
      mostra a API para ignorar um teste.
    </para>

    <table id="incomplete-and-skipped-tests.skipped-tests.tables.api">
      <title>API para testes ignorados.</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Método</entry>
            <entry>Significado</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>void markTestSkipped()</literal></entry>
            <entry>marca o teste atual como Ignorado.</entry>
          </row>
          <row>
            <entry><literal>void markTestSkipped(string $message)</literal></entry>
            <entry>Marca o teste atual como ignorado usando a variável <literal>$message</literal>
                   como uma mensagem explicativa.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>

  <section id="incomplete-and-skipped-tests.skipping-tests-using-requires">
    <title>Pulando testes usando @requires</title>

    <para>
      Em complemento aos métodos acima, também é possível usar a anotação
      <literal>@requires</literal> comumente para expressar pré-condição de um caso de teste.
    </para>

    <table id="incomplete-and-skipped-tests.requires.tables.api">
      <title>Possíveis usos do @requires</title>
      <tgroup cols="4" align="left" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry>Tipo</entry>
            <entry>Valor possível</entry>
            <entry>Exemplo</entry>
            <entry>Outro exemplo</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><literal>PHP</literal></entry>
            <entry>Qualquer versão do PHP</entry>
            <entry>@requires PHP 5.3.3</entry>
            <entry>@requires PHP 5.4-dev</entry>
          </row>
          <row>
            <entry><literal>PHPUnit</literal></entry>
            <entry>Qualquer versão do PHPUnit</entry>
            <entry>@requires PHPUnit 3.6.3</entry>
            <entry>@requires PHPUnit 3.7</entry>
          </row>
          <row>
            <entry><literal>function</literal></entry>
            <entry>Um parâmetro válido para <ulink url="http://php.net/function_exists">function_exists</ulink></entry>
            <entry>@requires function imap_open</entry>
            <entry>@requires function ReflectionMethod::setAccessible</entry>
          </row>
          <row>
            <entry><literal>extension</literal></entry>
            <entry>Qualquer nome de extensão</entry>
            <entry>@requires extension mysqli</entry>
            <entry>@requires extension curl</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <example id="incomplete-and-skipped-tests.skipping-tests.examples.DatabaseClassSkippingTest.php">
      <title>Ignorando testes usando @requires</title>
      <programlisting><![CDATA[<?php
/**
 * @requires extension mysqli
 */
class DatabaseTest extends PHPUnit_Framework_TestCase
{
    /**
     * @requires PHP 5.3
     */
    public function testConnection()
    {
        // Teste necessita da extensão mysqli e PHP >= 5.3
    }

    // ... Outros testes que precisam da extensão mysqli
}
?>]]></programlisting>
    </example>

  </section>

</chapter>
