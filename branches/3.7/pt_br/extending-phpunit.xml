<?xml version="1.0" encoding="utf-8" ?>

<chapter id="extending-phpunit">
  <title>Extendendo PHPUnit</title>

  <para>
    O PHPUnit pode ser extendido de várias maneiras para fazer a escrita
    dos testes mais fácil e customizar o retorno que você receberá o rodar
    os testes. Aqui estão os pontos iniciais mais comuns para extender o PHPUnit.
  </para>

  <section id="extending-phpunit.PHPUnit_Framework_TestCase">
    <title>Subclasse PHPUnit_Framework_TestCase</title>

    <para>
      <indexterm><primary>PHPUnit_Framework_TestCase</primary></indexterm>

      Escreva métodos de acerto e utilitários customizados em uma subclasse abstrata
      de <literal>PHPUnit_Framework_TestCase</literal> e derive sua classe de caso
      de teste desta classe. Este é um dos meios mais fácies de extender o PHPUnit.
    </para>
  </section>

  <section id="extending-phpunit.custom-assertions">
    <title>Escrever acertos customizados</title>

    <para>
      Quando escrevemos acertos customizados, esta é a melhor prática para 
      entender como as afirmações próprias do PHPUnit são implementadas. Como
      você pode ver no exemplo <xref linkend="extending-phpunit.examples.Assert.php"/>, 
      o método <literal>assertTrue()</literal> é exatamente um invólucro sobre os
      métodos <literal>isTrue()</literal> e <literal>assertThat()</literal>:
      <literal>isTrue()</literal> cria um objeto combinado que é passado para
      avaliação do método <literal>assertThat()</literal>.
    </para>

    <example id="extending-phpunit.examples.Assert.php">
      <title>Os métodos assertTrue() e isTrue() da classe PHPUnit_Framework_Assert</title>
      <programlisting><![CDATA[<?php
abstract class PHPUnit_Framework_Assert
{
    // ...

    /**
     * Asserts that a condition is true.
     *
     * @param  boolean $condition
     * @param  string  $message
     * @throws PHPUnit_Framework_AssertionFailedError
     */
    public static function assertTrue($condition, $message = '')
    {
        self::assertThat($condition, self::isTrue(), $message);
    }

    // ...

    /**
     * Returns a PHPUnit_Framework_Constraint_IsTrue matcher object.
     *
     * @return PHPUnit_Framework_Constraint_IsTrue
     * @since  Method available since Release 3.3.0
     */
    public static function isTrue()
    {
        return new PHPUnit_Framework_Constraint_IsTrue;
    }

    // ...
}?>]]></programlisting>
    </example>

    <para>
      O exemplo <xref linkend="extending-phpunit.examples.IsTrue.php"/> mostra como a
      classe <literal>PHPUnit_Framework_Constraint_IsTrue</literal> extende
      a classe abstrata <literal>PHPUnit_Framework_Constraint</literal> para objetos combinados (ou restrições).
    </para>

    <example id="extending-phpunit.examples.IsTrue.php">
      <title>A classe PHPUnit_Framework_Constraint_IsTrue</title>
      <programlisting><![CDATA[<?php
class PHPUnit_Framework_Constraint_IsTrue extends PHPUnit_Framework_Constraint
{
    /**
     * Evaluates the constraint for parameter $other. Returns TRUE if the
     * constraint is met, FALSE otherwise.
     *
     * @param mixed $other Value or object to evaluate.
     * @return bool
     */
    public function evaluate($other)
    {
        return $other === TRUE;
    }

    /**
     * Returns a string representation of the constraint.
     *
     * @return string
     */
    public function toString()
    {
        return 'is true';
    }
}?>]]></programlisting>
    </example>

    <para>
      O esforço para implementar os métodos <literal>assertTrue()</literal> e
      <literal>isTrue()</literal> tão bem como a classe <literal>PHPUnit_Framework_Constraint_IsTrue</literal> 
      produzindo os benefícios que <literal>assertThat()</literal> automaticamente
      se encarrega de avaliar a afirmação e contabilidade tem como contá-lo para estatísticas.
      Além disso, o método <literal>isTrue()</literal> pode ser usado como uma combinação
      durante a combinação de objetos fictícios.
    </para>
  </section>

  <section id="extending-phpunit.PHPUnit_Framework_TestListener">
    <title>Implementando PHPUnit_Framework_TestListener</title>

    <para>
      <indexterm><primary>PHPUnit_Framework_TestListener</primary></indexterm>

      O exemplo <xref linkend="extending-phpunit.examples.SimpleTestListener.php" />
      mostra uma simples implementação da interface <literal>PHPUnit_Framework_TestListener</literal>.
    </para>

    <example id="extending-phpunit.examples.SimpleTestListener.php">
      <title>A simple test listener</title>
      <programlisting><![CDATA[<?php
class SimpleTestListener implements PHPUnit_Framework_TestListener
{
    public function addError(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Error while running test '%s'.\n", $test->getName());
    }

    public function addFailure(PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time)
    {
        printf("Test '%s' failed.\n", $test->getName());
    }

    public function addIncompleteTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Test '%s' is incomplete.\n", $test->getName());
    }

    public function addSkippedTest(PHPUnit_Framework_Test $test, Exception $e, $time)
    {
        printf("Test '%s' has been skipped.\n", $test->getName());
    }

    public function startTest(PHPUnit_Framework_Test $test)
    {
        printf("Test '%s' started.\n", $test->getName());
    }

    public function endTest(PHPUnit_Framework_Test $test, $time)
    {
        printf("Test '%s' ended.\n", $test->getName());
    }

    public function startTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        printf("TestSuite '%s' started.\n", $suite->getName());
    }

    public function endTestSuite(PHPUnit_Framework_TestSuite $suite)
    {
        printf("TestSuite '%s' ended.\n", $suite->getName());
    }
}
?>]]></programlisting>
    </example>

    <para>
      No <xref linkend="appendixes.configuration.test-listeners"/> você pode ver 
      como configurar o PHP para anexar seu ambiente de teste na execução dos testes.
    </para>
  </section>

  <section id="extending-phpunit.PHPUnit_Extensions_TestDecorator">
    <title>Subclasse PHPUnit_Extensions_TestDecorator</title>

    <para>
      <indexterm><primary>PHPUnit_Extensions_TestDecorator</primary></indexterm>

      Você pode agrupar os casos de teste ou suítes de teste em uma 
      subclasse de <literal>PHPUnit_Extensions_TestDecorator</literal>  e usar
      o <emphasis>Decorator design pattern</emphasis> para realizar algumas ações
      antes e depois de rodar os testes.
    </para>

    <para>
      <indexterm><primary>PHPUnit_Extensions_RepeatedTest</primary></indexterm>
      <indexterm><primary>PHPUnit_Extensions_TestSetup</primary></indexterm>

      O PHPUnit navega entre dois <emphasis>decorators</emphasis> concretos de teses:
      <literal>PHPUnit_Extensions_RepeatedTest</literal> e
      <literal>PHPUnit_Extensions_TestSetup</literal>. A forma usado para rodar um 
      teste repetidas vezes e apenas contar o teste como sucesso se todas as iterações
      forem bem sucedidas. O último foi discutido em <xref linkend="fixtures" />.
    </para>

    <para>
      O exemplo <xref linkend="extending-phpunit.examples.RepeatedTest.php" />
      mostra uma versao anterior do decorator <literal>PHPUnit_Extensions_RepeatedTest</literal>
      que ilustra como escrever seu próprio memorizador de teste.
    </para>

    <example id="extending-phpunit.examples.RepeatedTest.php">
      <title>O Decorator RepeatedTest</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit/Extensions/TestDecorator.php';

class PHPUnit_Extensions_RepeatedTest extends PHPUnit_Extensions_TestDecorator
{
    private $timesRepeat = 1;

    public function __construct(PHPUnit_Framework_Test $test, $timesRepeat = 1)
    {
        parent::__construct($test);

        if (is_integer($timesRepeat) &&
            $timesRepeat >= 0) {
            $this->timesRepeat = $timesRepeat;
        }
    }

    public function count()
    {
        return $this->timesRepeat * $this->test->count();
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL)
    {
        if ($result === NULL) {
            $result = $this->createResult();
        }

        for ($i = 0; $i < $this->timesRepeat && !$result->shouldStop(); $i++) {
            $this->test->run($result);
        }

        return $result;
    }
}
?>]]></programlisting>
    </example>
  </section>

  <section id="extending-phpunit.PHPUnit_Framework_Test">
    <title>Implementando PHPUnit_Framework_Test</title>

    <para>
      <indexterm><primary>PHPUnit_Framework_Test</primary></indexterm>
      <indexterm><primary>Data-Driven Tests</primary></indexterm>

      A interface <literal>PHPUnit_Framework_Test</literal> está limitada e fácil
      de implementar. Você pode escrever uma implementação de 
      <literal>PHPUnit_Framework_Test</literal> mais simples do que 
      <literal>PHPUnit_Framework_TestCase</literal> e que roda
      <emphasis>data-driven tests (DDT)</emphasis>, por exemplo.
    </para>

    <para>
      O exemplo <xref linkend="extending-phpunit.examples.DataDrivenTest.php" />
      mostra uma classe de testes DDT que compara valores de um arquivo CSV.
      Cada linha do arquivo possui o registro
      <literal>foo;bar</literal>, enquanto que o primeiro valor é o valor esperado
      e o segundo valor é o verdadeiro.
    </para>

    <example id="extending-phpunit.examples.DataDrivenTest.php">
      <title>A data-driven test</title>
      <programlisting><![CDATA[<?php
class DataDrivenTest implements PHPUnit_Framework_Test
{
    private $lines;

    public function __construct($dataFile)
    {
        $this->lines = file($dataFile);
    }

    public function count()
    {
        return 1;
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL)
    {
        if ($result === NULL) {
            $result = new PHPUnit_Framework_TestResult;
        }

        foreach ($this->lines as $line) {
            $result->startTest($this);
            PHP_Timer::start();
            $stopTime = NULL;

            list($expected, $actual) = explode(';', $line);

            try {
                PHPUnit_Framework_Assert::assertEquals(
                  trim($expected), trim($actual)
                );
            }

            catch (PHPUnit_Framework_AssertionFailedError $e) {
                $stopTime = PHP_Timer::stop();
                $result->addFailure($this, $e, $stopTime);
            }

            catch (Exception $e) {
                $stopTime = PHP_Timer::stop();
                $result->addError($this, $e, $stopTime);
            }

            if ($stopTime === NULL) {
                $stopTime = PHP_Timer::stop();
            }

            $result->endTest($this, $stopTime);
        }

        return $result;
    }
}

$test = new DataDrivenTest('data_file.csv');
$result = PHPUnit_TextUI_TestRunner::run($test);
?>]]></programlisting>

      <screen><![CDATA[PHPUnit 3.7.0 by Sebastian Bergmann.

.F

Time: 0 seconds

There was 1 failure:

1) DataDrivenTest
Failed asserting that two strings are equal.
expected string <bar>
difference      <  x>
got string      <baz>
/home/sb/DataDrivenTest.php:32
/home/sb/DataDrivenTest.php:53

FAILURES!
Tests: 2, Failures: 1.]]></screen>
    </example>
  </section>
</chapter>
