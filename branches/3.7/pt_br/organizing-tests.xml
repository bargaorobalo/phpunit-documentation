<?xml version="1.0" encoding="utf-8" ?>

<chapter id="organizing-tests">
  <title>Organizando os Testes</title>

  <para>
    <indexterm><primary>Suíte de Teste</primary></indexterm>

    Uma das vantagens do PHPUnit (veja <xref linkend="goals" />) é que os teste
    podem ser compostos: nós queremos estar aptos a rodar qualquer número ou 
    combinações de testes ao mesmo tempo, para iniciar todos os testes para o
    projeto inteiro, ou os testes para todas as classes de um componente que 
    faz parte do projeto, ou apenas os testes para uma única classe.
  </para>

  <para>
    O PHPunit suporta diferentes maneiras para organizar os testes e compô-las dentro
    de uma suíte de testes. Este capítulo mostrará as aboradagems mais comuns de
    uso do PHPUnit.
  </para>

  <section id="organizing-tests.filesystem">
    <title>Compondo uma Suíte de Teste usando o Sistema de Arquivos (Filesystem)</title>

    <para>
      Provavelmente a forma mais fácil de compor uma suíte de teste é manter todos
      os casos arquivos com os casos de teste em único diretório. O PHPUnit pode
      encontrar encontrar automaticamente estes testes e executá-los percorrendo
      recursivamente o diretório de teste.
    </para>

    <para>
      Vamos ver uma suúte de testes da biblioteca <ulink url="http://github.com/sebastianbergmann/php-object-freezer/">Object_Freezer</ulink>
      Vendo a estrutura de diretório deste projeto, nós vemos que as classes com
      os casos de teste estão no diretório <filename>Tests</filename> que é um
      espelho da estrutura de pacotes e classes do sistema do qual o teste irá rodar (<emphasis>SUT em inglês</emphasis>).
      Esta estrutura está no diretório <filename>Object</filename>:
    </para>

    <screen>Objetos                              Testes
|-- Freezer                         |-- Freezer
|   |-- HashGenerator               |   |-- HashGenerator
|   |   `-- NonRecursiveSHA1.php    |   |   `-- NonRecursiveSHA1Test.php
|   |-- HashGenerator.php           |   |
|   |-- IdGenerator                 |   |-- IdGenerator
|   |   `-- UUID.php                |   |   `-- UUIDTest.php
|   |-- IdGenerator.php             |   |
|   |-- LazyProxy.php               |   |
|   |-- Storage                     |   |-- Storage
|   |   `-- CouchDB.php             |   |   `-- CouchDB
|   |                               |   |       |-- WithLazyLoadTest.php
|   |                               |   |       `-- WithoutLazyLoadTest.php
|   |-- Storage.php                 |   |-- StorageTest.php
|   `-- Util.php                    |   `-- UtilTest.php
`-- Freezer.php                     `-- FreezerTest.php</screen>

    <para>
      Para executar todos os testes desta biblioteca, nós precisamos saber a 
      linha de comando para rodar o PHPUnit no diretório de teste:
    </para>

    <screen><userinput>phpunit Tests</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

............................................................ 60 / 75
...............

Time: 0 seconds

OK (75 tests, 164 assertions)</screen>

    <note>
      <para>
        se você apontar a chamada do PHPUnit para rodar em um diretório, ele vai
        procurar por arquivos do tipo <filename>*Test.php</filename>.
      </para>
    </note>

    <para>
      Para rodar apenas os casos de testes declarados na classe <literal>Object_FreezerTest</literal>,
      você pode usar o seguinte comando:
    </para>

    <screen><userinput>phpunit Tests/FreezerTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

............................

Time: 0 seconds

OK (28 tests, 60 assertions)</screen>

    <para>
      Para um controle mais refinado dos testes executados, você pode usar
      o atributo <literal>--filter</literal>:
    </para>

    <screen><userinput>phpunit --filter testFreezingAnObjectWorks Tests</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

.

Time: 0 seconds

OK (1 test, 2 assertions)</screen>

    <note>
      <para>
        Um incoveniente desta abordate é que nós não temos controle sobre a ordem 
        em que os testes são executados. Este pode nós conduzir para problemas que
        no que diz respeito as dependências dos testes, veja <xref linkend="writing-tests-for-phpunit.test-dependencies"/>.
        Na próxima sessão você irá ver como você pode marcar explicitamente a ordem de execução 
        usando um arquivo de comfiguração em XML.
      </para>
    </note>
  </section>

  <section id="organizing-tests.xml-configuration">
    <title>Compondo uma Suíte de Teste usando Configuração em XML</title>
    <indexterm><primary>Configuração XML</primary></indexterm>

    <para>
      O arquivo de configuração do PHPUnit em XML (<xref linkend="appendixes.configuration"/>)
      pode também ser usado para compor uma suíte de teste. O arquivo
      <xref linkend="organizing-tests.xml-configuration.examples.phpunit.xml"/>
      mostra um exemplo mínimo onde adicionamos todas as classes <literal>*Test</literal> 
      que forem encontradas nos arquivos <filename>*Test.php</filename> quando os 
      <filename>Tests</filename> são percorridos recursivamente.
    </para>

    <example id="organizing-tests.xml-configuration.examples.phpunit.xml">
      <title>Compondo uma Suíte de Teste usando Configuração em XML</title>
      <programlisting><![CDATA[<phpunit>
  <testsuites>
    <testsuite name="Object_Freezer">
      <directory>Tests</directory>
    </testsuite>
  </testsuites>
</phpunit>]]></programlisting>
    </example>

    <para>
      A ordem em que os testes são executados podem ser explicitados:
    </para>

    <example id="organizing-tests.xml-configuration.examples.phpunit.xml2">
      <title>Compondo uma Suíte de Teste usando Configuração em XML</title>
      <programlisting><![CDATA[<phpunit>
  <testsuites>
    <testsuite name="Object_Freezer">
      <file>Tests/Freezer/HashGenerator/NonRecursiveSHA1Test.php</file>
      <file>Tests/Freezer/IdGenerator/UUIDTest.php</file>
      <file>Tests/Freezer/UtilTest.php</file>
      <file>Tests/FreezerTest.php</file>
      <file>Tests/Freezer/StorageTest.php</file>
      <file>Tests/Freezer/Storage/CouchDB/WithLazyLoadTest.php</file>
      <file>Tests/Freezer/Storage/CouchDB/WithoutLazyLoadTest.php</file>
    </testsuite>
  </testsuites>
</phpunit>]]></programlisting>
    </example>
  </section>
</chapter>
