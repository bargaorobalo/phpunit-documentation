<?xml version="1.0" encoding="utf-8" ?>

<chapter id="other-uses-for-tests">
  <title>Outros Usos para Teste</title>

  <para>
    Depois de conseguir escrever testes automatizados, você descobrirá
    facilmente mais usos para os testes. Aqui estão alguns exemplos.
  </para>

  <section id="other-uses-for-tests.agile-documentation">
    <title>Documentação Ágil</title>

    <para>
      <indexterm><primary>Documentação Ágil</primary></indexterm>
      <indexterm><primary>Documentação Automatizada</primary></indexterm>
      <indexterm><primary>Extreme Programming</primary></indexterm>
      <indexterm><primary>TestDox</primary></indexterm>

      Tipicamente, em um projeto que é desenvolvido usando um processo ágil,
      como Extreme Programming (XP), a documentação não pode acompanhar as frequentes
      mudanças de design do projeto e do código. O XP exige a <emphasis>
      propriedade coletiva do código</emphasis>, assi, todos os desenvolvedores
      precisam conhecer como o sistema funciona como um todo. Se você é disciplinado
      o suficiente para, consequentemente, usar "nomes fáceis" para os seus 
      testes que descrevam o que uma classe deve fazer, você pode usar a funcionalidade
      TestDox do PHPUnit para gerar documentação automatica para o seu projeto que seja 
      baseada nestes testes. Esta documentação dá aos desenvolvedores um visão geral
      do que cada classe do projeto supõe fazer.
    </para>

    <para>
      A funcionalidade TestDox do PHPUnit olha para uma classe de teste e todos
      os nomes dos métodos de testes e os converte a parir do nome das sentenças:
      <literal>testBalanceIsInitiallyZero()</literal> torna-se "Balance is 
      initially zero" (<emphasis>O equilíbrio é inicialmente zero</emphasis>). 
      Se há muitos métodos de teste com o mesmo nome, porém diferentes apenas de um
      dígito, por exemplo <literal>testBalanceCannotBecomeNegative()</literal> e
      <literal>testBalanceCannotBecomeNegative2()</literal>, a sentença será interpretada
      apenas uma vez, assumindo que todos os testes foram executados com sucesso.
    </para>

    <para>
      Vamos dar uma olhada na documentação ágil gerada pela classe <literal>BankAccount</literal> 
      (conforme <xref linkend="test-driven-development.bankaccount-example.examples.BankAccountTest.php" />):
    </para>

    <screen><userinput>phpunit --testdox BankAccountTest</userinput>
PHPUnit 3.7.0 by Sebastian Bergmann.

BankAccount
 [x] Balance is initially zero
 [x] Balance cannot become negative</screen>

    <para>
      Alternativamente, a documentação ágil pode ser gerada nor formato HTML, texto puro
      ou escrito em um arquivo usando os argumentos <literal>--testdox-html</literal>
      e <literal>--testdox-text</literal>.
    </para>

    <para>
      <indexterm><primary>Documentando Hipóteses</primary></indexterm>

      A documentação ágil pode ser usada para documentar as hipóteses feitas
      sobre os pacotes externos que você usa no seu projeto. Quando você usa um
      pacote externo, você está expondo os riscos que o pacote não se comporta
      como você espera, e a futura versão do pacote mudará de maneira que o seu
      código será quebrado, sem que você saiba. Você pode lidar com estes riscos,
      escrevendo um teste cada vez que você fizer uma suposição. Se o seu teste 
      executar com sucesso, sua suposição está válida. Se você documentar todas 
      as suas suposições com testes, novas versões do seu pacote externo não serão
      mais motivo de preocupação: se os testes executarem com sucesso, seu sistema
      continuará trabalhando.
    </para>
  </section>

  <section id="other-uses-for-tests.cross-team-tests">
    <title>Teste Cross-Team</title>

    <para>
      Quando você documenta suposições nos testes, você possui os testes.
      O fornecedor do pacote não conheçe nada sobre os seus testes. Se
      você quer ter uma relação mais próxima com o fornecedor de um pacote, 
      você pode usar os testes para comunicar e coordenar suas atividades.
    </para>

    <para>
      Quando você concorda em coordenar suas atividades com o fornecedor de um
      pacote, você pode escrever os testes juntos. Isto pode ser feito de tal
      maneira que os testes revelem tantas suposições quanto forem possíveis. 
      As suposições ocultas são fatais para a cooperação. Com os testes, você 
      documenta exatamente o que você espera do pacote enviado pelo fornecedor. 
      O fornecedor saberá se o pacote está completo rodando todos os testes.
    </para>

    <para>
      <indexterm><primary>Pontas</primary></indexterm>
 
      Ao utilizar ponta (veja o capítulo sobre "Burlar Objetos" anteriormente neste livro), 
      você pode se dissociar ainda mais do fornecedor: o trabalho do fornecedor é fazer os
      testes rodarem com uma implementação real do pacote. Seu trabalho é fazer os testes
      rodarem no seu código. Até o momento em que você possui a implementação real do 
      pacote enviado pelo fornecedor, você usrá objetos de ponta. Usando esta 
      aproximação, os dois times podem desenvolver independentemente.
    </para>
  </section>
</chapter>
