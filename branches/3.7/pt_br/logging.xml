<?xml version="1.0" encoding="utf-8" ?>

<chapter id="logging">
  <title>Gerando Log</title>

  <para>
    <indexterm><primary>Log</primary></indexterm>

    O PHPUnit pode produzir vários tipos de arquivos de log.
  </para>

  <section id="logging.xml">
    <title>Resultado dos Testes (XML)</title>

    <para>
      Os arquivos XML de log resultantes dos testes realizados pelo PHPUnit está baseado
      na forma usada pelo <ulink url="http://ant.apache.org/manual/OptionalTasks/junit.html">JUnit
      task for Apache Ant</ulink>. Os exemplos a seguir mostram o arquivo de log gerado
      para os testes da classe <literal>ArrayTest</literal>:
    </para>

    <screen><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="ArrayTest"
             file="/home/sb/ArrayTest.php"
             tests="2"
             assertions="2"
             failures="0"
             errors="0"
             time="0.016030">
    <testcase name="testNewArrayIsEmpty"
              class="ArrayTest"
              file="/home/sb/ArrayTest.php"
              line="6"
              assertions="1"
              time="0.008044"/>
    <testcase name="testArrayContainsAnElement"
              class="ArrayTest"
              file="/home/sb/ArrayTest.php"
              line="15"
              assertions="1"
              time="0.007986"/>
  </testsuite>
</testsuites>]]></screen>

    <para>
      O arquivo XML de log a seguir foram gerados por dois testes,
      <literal>testFailure</literal> e <literal>testError</literal>,
      em uma classe de testes chamada <literal>FailureErrorTest</literal> e
      mostra como as falhas e erros são mostrados.
    </para>

    <screen><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="FailureErrorTest"
             file="/home/sb/FailureErrorTest.php"
             tests="2"
             assertions="1"
             failures="1"
             errors="1"
             time="0.019744">
    <testcase name="testFailure"
              class="FailureErrorTest"
              file="/home/sb/FailureErrorTest.php"
              line="6"
              assertions="1"
              time="0.011456">
      <failure type="PHPUnit_Framework_ExpectationFailedException">
testFailure(FailureErrorTest)
Failed asserting that &lt;integer:2&gt; matches expected value &lt;integer:1&gt;.

/home/sb/FailureErrorTest.php:8
</failure>
    </testcase>
    <testcase name="testError"
              class="FailureErrorTest"
              file="/home/sb/FailureErrorTest.php"
              line="11"
              assertions="0"
              time="0.008288">
      <error type="Exception">testError(FailureErrorTest)
Exception:

/home/sb/FailureErrorTest.php:13
</error>
    </testcase>
  </testsuite>
</testsuites>]]></screen>
  </section>

  <section id="logging.tap">
    <title>Resultado dos Testes(TAP)</title>

    <para>
      O teste chamado <ulink url="http://testanything.org/">Test Anything Protocol (TAP)</ulink>
      <emphasis>(Qualquer protocolo de teste, em tradução livre)</emphasis> é uma simples 
      interface entre módulos de testes escrita em PEARL. O próximo exemplo mostra o 
      arquivo de log gerado TAP para os testes de <literal>ArrayTest</literal>:
    </para>

    <screen>TAP version 13
ok 1 - testNewArrayIsEmpty(ArrayTest)
ok 2 - testArrayContainsAnElement(ArrayTest)
1..2</screen>

    <para>
      O arquivo TAP de log a seguir foram gerados por dois testes,
      <literal>testFailure</literal> e <literal>testError</literal>,
      em uma classe de testes chamada <literal>FailureErrorTest</literal> e
      mostra como as falhas e erros são mostrados.
    </para>

    <screen><![CDATA[TAP version 13
not ok 1 - Failure: testFailure(FailureErrorTest)
  ---
  message: 'Failed asserting that <integer:2> matches expected value <integer:1>.'
  severity: fail
  data:
    got: 2
    expected: 1
  ...
not ok 2 - Error: testError(FailureErrorTest)
1..2]]></screen>
  </section>

  <section id="logging.json">
    <title>Resultado de Testes (JSON)</title>

    <para>
      O JSON, <ulink url="http://www.json.org/">JavaScript Object Notation</ulink>,
      é um formato simples de troca de informação entre sistemas. O exemplo a seguir
      mostra a mesmagem gerada no formato JSON para os testes da classe 
      <literal>ArrayTest</literal>:
    </para>

    <screen>{"event":"suiteStart","suite":"ArrayTest","tests":2}
{"event":"test","suite":"ArrayTest",
 "test":"testNewArrayIsEmpty(ArrayTest)","status":"pass",
 "time":0.000460147858,"trace":[],"message":""}
{"event":"test","suite":"ArrayTest",
 "test":"testArrayContainsAnElement(ArrayTest)","status":"pass",
 "time":0.000422954559,"trace":[],"message":""}</screen>

    <para>
      The following JSON messages were generated for two tests,
      <literal>testFailure</literal> and <literal>testError</literal>,
      of a test case class named <literal>FailureErrorTest</literal> and
      show how failures and errors are denoted.
    </para>

    <screen><![CDATA[{"event":"suiteStart","suite":"FailureErrorTest","tests":2}
{"event":"test","suite":"FailureErrorTest",
 "test":"testFailure(FailureErrorTest)","status":"fail",
 "time":0.0082459449768066,"trace":[],
 "message":"Failed asserting that <integer:2> is equal to <integer:1>."}
{"event":"test","suite":"FailureErrorTest",
 "test":"testError(FailureErrorTest)","status":"error",
 "time":0.0083680152893066,"trace":[],"message":""}]]></screen>
  </section>

  <section id="logging.codecoverage.xml">
    <title>Registro de Cobertura(XML)</title>

    <para>
      O formato XML para o código de cobertura do log de informação produzido pelo PHPUnit
      é baseado no uso do softere <ulink url="http://www.atlassian.com/software/clover/">
      Clover</ulink>. O exemplo a seguir mostra o arquivo XML de log gerado pelo teste na classe
      <literal>BankAccountTest</literal>:
    </para>

    <screen><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<coverage generated="1184835473" phpunit="3.6.0">
  <project name="BankAccountTest" timestamp="1184835473">
    <file name="/home/sb/BankAccount.php">
      <class name="BankAccountException">
        <metrics methods="0" coveredmethods="0" statements="0"
                 coveredstatements="0" elements="0" coveredelements="0"/>
      </class>
      <class name="BankAccount">
        <metrics methods="4" coveredmethods="4" statements="13"
                 coveredstatements="5" elements="17" coveredelements="9"/>
      </class>
      <line num="77" type="method" count="3"/>
      <line num="79" type="stmt" count="3"/>
      <line num="89" type="method" count="2"/>
      <line num="91" type="stmt" count="2"/>
      <line num="92" type="stmt" count="0"/>
      <line num="93" type="stmt" count="0"/>
      <line num="94" type="stmt" count="2"/>
      <line num="96" type="stmt" count="0"/>
      <line num="105" type="method" count="1"/>
      <line num="107" type="stmt" count="1"/>
      <line num="109" type="stmt" count="0"/>
      <line num="119" type="method" count="1"/>
      <line num="121" type="stmt" count="1"/>
      <line num="123" type="stmt" count="0"/>
      <metrics loc="126" ncloc="37" classes="2" methods="4" coveredmethods="4"
               statements="13" coveredstatements="5" elements="17"
               coveredelements="9"/>
    </file>
    <metrics files="1" loc="126" ncloc="37" classes="2" methods="4"
             coveredmethods="4" statements="13" coveredstatements="5"
             elements="17" coveredelements="9"/>
  </project>
</coverage>]]></screen>
  </section>

  <section id="logging.codecoverage.text">
    <title>Registro de Cobertura (TEXT)</title>

    <para>
      Um registro de cobertura legível pelo ser humado é produzido por linah de comando 
      ou arquivo de texto.

      
      O objetivo deste formato de saída é promover uma visão rápida da cobertura
      enquanto trabalha em um pequeno conjunto de classes. Para projetos grandes
      esta saída pode ser usual para buscar uma rápida revisão dos projetos cobertos
      ou usando a funcionalidade <literal>--filter</literal>.

      Quando utilizado a partir da linha de comando para escrever na saída <literal>php://stdout</literal>
      é bom que se use o comando <literal>--colors</literal>.

      A opção padrão quando se usa linha de comando é a escrita na saída padrão do programa, que pode
      ser um console ou algum programa específico usado para executar os testes. 

      Por padrão, apenas são mostrados arquivos que tenham pelo menos uma linha coberta.
      Este pode ser selecionado apenas pela opção  <literal>showUncoveredFiles</literal>
      do arquivo XML de configuração.
    </para>

    <figure id="code-coverage-analysis.figures.Code_Coverage4.png">
      <title>Saída de cobertura de código na linha de comando com cores</title>

      <graphic fileref="figures/Code_Coverage4.png" />
    </figure>
    
    </section>
</chapter>
